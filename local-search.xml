<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基础指针学习笔记</title>
    <link href="/Pointer/"/>
    <url>/Pointer/</url>
    
    <content type="html"><![CDATA[<p>这是一个变量 <code>a</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a;<br></code></pre></td></tr></table></figure><p><code>a</code> 变量的地址的表达式为 <code>&amp;a</code></p><p>你想要把变量 a 的地址存下来，就用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span>* p = &amp;a;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> *p = &amp;a;<br></code></pre></td></tr></table></figure><p>这两种是一样的，但是推荐第一种因为看着不会乱</p><p>想要表示 地址 <code>p</code> 对应的 <strong>变量</strong>，就用<code>*p</code>，在这里 <code>*p</code> 完全相当于 <code>a</code></p><p>这下面两行效果是完全一样的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,*p);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a);<br></code></pre></td></tr></table></figure><p>然后还有，注意这下面两种是不一样的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">*p += <span class="hljs-number">1</span>;<span class="hljs-comment">//相当于 a += 1</span><br>*p++;    <span class="hljs-comment">//相当于 *(p++)</span><br></code></pre></td></tr></table></figure><p>另外还有一个容易混淆的 <strong>引用</strong>，相当于给变量<code>a</code> 起别名 <code>b</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span>&amp; b = a;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> &amp;b = a;<br></code></pre></td></tr></table></figure><p>这两种也是一样的，但是依然推荐第一种因为看着不会乱</p><p>基础指针内容到此为止</p><hr /><p>简单概括指针内容：</p><p>已知变量 <code>int a</code>:</p><ul><li><p><code>a;</code> 这是变量</p></li><li><p><code>&amp;a</code> 这是 a 的地址</p></li></ul><p>令 <code>int* p = &amp;a</code>：</p><ul><li><p><code>p</code> 相当于 <code>&amp;a</code></p></li><li><p><code>*p</code> 相当于 <code>a</code></p></li></ul><p>也就是说</p><ul><li><p><code>&amp;变量</code> 就相当于变量的地址</p></li><li><p><code>int* 地址</code> 就是申请了一个地址变量</p></li><li><p><code>*地址</code> 就相当于该地址对应的变量</p></li></ul><p>另外</p><ul><li><code>int&amp; b =  a</code> 相当于给变量 <code>a</code> 起别名<code>b</code></li></ul><hr /><p>上例题</p><h3 id="例-1">例 1</h3><p>输入 <span class="math inline">\(n\)</span>个变量，使用指针变量访问输出。</p><p>分析：数组的存储对应的地址是连续的，所以可以对地址以此加一来取数组的值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><span class="hljs-type">int</span> x[n];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x[i]);<br><span class="hljs-type">int</span>* p = x; <span class="hljs-comment">// 相当于 int *p = &amp;x[0];</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *p);<br>p++;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr /><h3 id="例-2">例 2</h3><p>编写函数交换变量 a、b 的值。</p><h3 id="错误">（错误）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> b=<span class="hljs-number">2</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t = x;<br>    y = x;<br>    x = t;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">swap</span>(a,b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, a, b);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序之所以错误，是因为在函数的入口处，<code>int x</code> 相当于<code>int x = a</code>，<code>y</code> 同理，所以 <code>x</code> 和<code>y</code> 交换并不会改变 <code>a</code>、<code>b</code> 的值；</p><h3 id="正确指针">（正确，指针）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> b=<span class="hljs-number">2</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>* x, <span class="hljs-type">int</span>* y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t = *x;<br>    *y = x;<br>    *x = t;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">swap</span>(&amp;a,&amp;b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, a, b);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序在函数入口处传进 a、b的地址，并在函数内对这两个地址对应的变量进行操作，所以正确。</p><h3 id="正确引用">（正确，引用）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> b=<span class="hljs-number">2</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; x, <span class="hljs-type">int</span>&amp; y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t = x;<br>    y = x;<br>    x = t;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">swap</span>(a,b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, a, b);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序在函数入口处函，<code>int&amp; x</code> 相当于<code>int&amp; x = a</code>，<code>y</code> 同理，所以 <code>x</code> 和<code>y</code> 相当于 <code>a</code> 和 <code>b</code>的别名，并且对这两个数的值进行交换。</p><hr /><h3 id="再谈字符数组与指针">再谈字符数组与指针</h3><p>我们读入并且输出字符数组的时候，用法如下： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span> s[<span class="hljs-number">101</span>];<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,s);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,s);<br></code></pre></td></tr></table></figure> 这里<code>scanf</code> 的 <code>s</code> 并不用且不能写成<code>&amp;s</code>，因为我们在例题一中其实就有提过，这里的<code>s</code> 就相当于 <code>&amp;s[0]</code> 。</p><p>读者可能会问，既然我们在 printf() 函数中传入的是 &amp;s[0]，printf()函数怎么判断字符串的长度呢？</p><p>其实无论是使用 scanf()函数读入字符数组，还是初始化字符数组，字符数组最后一位的下一位会有一个<code>'\0'</code> 表示字符串已结束。</p><h3 id="例-3">例 3</h3><p>定义一个函数，使用指针传参来实现两个字符串的拼接，将结果存储在第一个字符串指针指向的内存空间中。要求第一个字符串有足够的空间来存放拼接后的结果。并在主函数中定义两个字符串，调用该函数，并输出拼接后的结果。</p><p>这道例题的代码是用网上的代码修改的，其思路和巧妙程度让我叹为观止。理解好这个程序，相信读者能对指针的应用能有更深入的理解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">str</span><span class="hljs-params">(<span class="hljs-type">char</span> *p1, <span class="hljs-type">char</span> *p2)</span> </span>&#123;<br><span class="hljs-keyword">while</span> (*p1++);<br>p1--;<br><span class="hljs-keyword">while</span> (*p1++ = *p2++);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">char</span> s1[<span class="hljs-number">101</span>] = <span class="hljs-string">&quot;ABCD&quot;</span>, s2[<span class="hljs-number">101</span>] = <span class="hljs-string">&quot;EFGH&quot;</span>;<br><span class="hljs-built_in">str</span>(s1, s2);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, s1); <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：这里的相当代码只是便于读者理解代码的执行顺序，其作用可能略有差别</p><p>这里第四行 <code>while (*p1++);</code> 相当于<code>while(*(p1++));</code>，也相当于</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span>(*p1)<br>&#123;<br>p1++;<br>&#125;<br>p1++<span class="hljs-comment">//注意；尽管当 while 的条件 *p1 已经为 false 了，不再执行 while 循环括号里面的内容了，但是 p1++ 依然会执行最后一次</span><br></code></pre></td></tr></table></figure><p>而 <code>while(*p1)</code>作用相当于又相当于<code>while(*p1 != '\0')</code>（<code>'\0'</code> 的 ASCII 码是0），即将 p1 的地址移到 <code>'\0'</code>处停止，然后即使停止了，仍然会执行一次p1++，所以要在第五行，重新执行一次 p1--，让 p1 的地址保持在<code>'\0'</code> 处；</p><p>然后再下一行相当于<code>while (*(p1++) = *(p2++) != '\0');</code></p><p>相当于依次执行下列代码 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">*p1=*p2;<br><span class="hljs-keyword">while</span>(*p1)<br>&#123;<br>p1++;<br>p2++;<br>*p1=*p2;<br>&#125;<br>p1++;<span class="hljs-comment">// 注意：尽管当 while 的条件 *p1 已经为 false 了，不再执行 while 循环括号里面的内容了，但是 p1++ 和 p2++ 依然会执行最后一次</span><br>p2++;<br></code></pre></td></tr></table></figure> 即依次移动，将 p2对应的字符赋值给 p1，直到遇到 <code>'\0'</code> 结束。</p><hr /><p>好耶，那么这期博客就到这里结束啦（错乱）</p><p>写这个写了三天呢，希望能赶紧回去读书吧！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>渲染测试</title>
    <link href="/hello-world/"/>
    <url>/hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="h1">H1</h1><h2 id="h2">H2</h2><h3 id="h3">H3</h3><p><strong>bold text</strong></p><p><em>italicized text</em></p><blockquote><p>blockquote</p></blockquote><ol type="1"><li>First item</li><li>Second item</li><li>Third item</li></ol><ul><li>First item</li><li>Second item</li><li>Third item</li></ul><p><code>code</code></p><hr /><p><a href="https://www.example.com">title</a></p><figure><imgsrc="https://image.baidu.com/search/down?url=https://tvax4.sinaimg.cn/large/006eegdsgy1hdq4iscicrj31hc0u0qnr.jpg"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><table><thead><tr class="header"><th>Syntax</th><th>Description</th></tr></thead><tbody><tr class="odd"><td>Header</td><td>Title</td></tr><tr class="even"><td>Paragraph</td><td>Text</td></tr></tbody></table><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;John&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Smith&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">25</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>Here's a sentence with a footnote.<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="This is the footnote.">[1]</span></a></sup></p><dl><dt>term</dt><dd>definition</dd></dl><p><del>The world is flat.</del></p><ul class="task-list"><li><label><input type="checkbox" checked="" />Write the pressrelease</label></li><li><label><input type="checkbox" />Update the website</label></li><li><label><input type="checkbox" />Contact the media</label></li></ul><p>When <span class="math inline">\(a \ne 0\)</span>, there are twosolutions to <span class="math inline">\(ax^2 + bx + c = 0\)</span> andthey are <span class="math display">\[x = {-b \pm \sqrt{b^2-4ac} \over2a}.\]</span></p><h3 id="the-lorenz-equations">The Lorenz Equations</h3><p><span class="math display">\[\begin{align}    \dot{x} &amp; = \sigma(y-x) \\    \dot{y} &amp; = \rho x - y - xz \\    \dot{z} &amp; = -\beta z + xy    \end{align}\]</span></p><h3 id="the-cauchy-schwarz-inequality">The Cauchy-SchwarzInequality</h3><p><span class="math display">\[\left( \sum_{k=1}^n a_k b_k \right)^{\!\!2} \leq     \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\]</span></p><h3 id="a-cross-product-formula">A Cross Product Formula</h3><p><span class="math display">\[\mathbf{V}_1 \times \mathbf{V}_2 =       \begin{vmatrix}        \mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\        \frac{\partial X}{\partial u} &amp; \frac{\partial Y}{\partialu} &amp; 0 \\        \frac{\partial X}{\partial v} &amp; \frac{\partial Y}{\partialv} &amp; 0 \\       \end{vmatrix}\]</span></p><h3 id="the-probability-of-getting-k-heads-when-flipping-n-coins-is">Theprobability of getting <span class="math inline">\(k\)</span> heads whenflipping <span class="math inline">\(n\)</span> coins is:</h3><p><span class="math display">\[P(E) = {n \choose k} p^k (1-p)^{ n-k}\]</span></p><h3 id="an-identity-of-ramanujan">An Identity of Ramanujan</h3><p><span class="math display">\[\frac{1}{(\sqrt{\phi \sqrt{5}}-\phi) e^{\frac25 \pi}} =         1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}}          {1+\frac{e^{-8\pi}} {1+\ldots} } } }\]</span></p><h3 id="a-rogers-ramanujan-identity">A Rogers-Ramanujan Identity</h3><p><span class="math display">\[1 +  \frac{q^2}{(1-q)}+\frac{q^6}{(1-q)(1-q^2)}+\cdots =        \prod_{j=0}^{\infty}\frac{1}{(1-q^{5j+2})(1-q^{5j+3})},         \quad\quad \text{for $|q| &lt; 1$}.\]</span></p><h3 id="maxwells-equations">Maxwell's Equations</h3><p><span class="math display">\[\begin{align}      \nabla \times \vec{\mathbf{B}} -\, \frac1c\,\frac{\partial\vec{\mathbf{E}}}{\partial t} &amp; =\frac{4\pi}{c}\vec{\mathbf{j}} \\      \nabla \cdot \vec{\mathbf{E}} &amp; = 4 \pi \rho \\      \nabla \times \vec{\mathbf{E}}\, +\, \frac1c\,\frac{\partial\vec{\mathbf{B}}}{\partial t} &amp; = \vec{\mathbf{0}} \\      \nabla \cdot \vec{\mathbf{B}} &amp; = 0    \end{align}\]</span></p><h3 id="in-line-mathematics">In-line Mathematics</h3>Finally, while display equations look good for a page of samples, theability to mix math and text in a paragraph is also important. Thisexpression <span class="math inline">\(\sqrt{3x-1}+(1+x)^2\)</span> isan example of an inline equation.<section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>This is the footnote.<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>自我介绍</title>
    <link href="/self-introduction/public/"/>
    <url>/self-introduction/public/</url>
    
    <content type="html"><![CDATA[<blockquote><p>A kitten carved from the wood of a white tree</p></blockquote><p>你好！</p><p>我是 Dian_Jiao，一只普通的猫猫。</p><h2 id="身份">身份</h2><ul><li>从出生起，就是一只猫猫</li><li>偏远小渔村普普通通高四复读生</li></ul><h2 id="爱好">爱好</h2><ul><li>喜欢和好朋友一起玩</li><li>喜欢 furry（较幼）、兽太和正太，但是没有入圈（</li></ul><h2 id="关于朋友">关于朋友</h2><p>我曾思考过，我愿意跟怎样的人相处。这个问题在之前我并没有明确的答案，觉得只要想相处合得来就是了，近期才想到答案，就是可爱善良单纯的男孩子。哪怕是对象，我的要求也是这样，只不过朋友我希望有空的时候能陪我玩陪我聊天就可以了，对象我希望可以一辈子陪着我跟我在一起。</p><h2 id="联系方式">联系方式</h2><ul><li>QQ：1633946103</li></ul>]]></content>
    
    
    <categories>
      
      <category>自我介绍</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
